{"version":3,"sources":["components/addcustomer.js","components/customerlist.js","components/traininglist.js","components/calendar.js","App.js","serviceWorker.js","index.js"],"names":["addcustomer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","name","value","saveCustomer","customer","firstname","state","lastname","streetaddress","postcode","city","email","phone","addModal","current","hide","React","createRef","_this2","react_default","a","createElement","className","Button_default","style","width","variant","color","onClick","show","Add_default","lib_default","dialogStyles","height","marginLeft","hideOnOverlayClicked","ref","title","TextField_default","type","required","margin","label","onChange","Save_default","Component","Customerlist","params","handleDateTimePicker","moment","toDate","getCustomers","fetch","then","response","json","responseData","customers","content","getTrainings","link","trainings","deleteCustomer","method","showDeleteSnack","headers","Content-Type","body","JSON","stringify","showAddCustomerSnack","setCustomer","addModal2","saveTraining","training","date","activity","duration","showAddTrainingSnack","handleClose","customerColumns","Header","columns","accessor","maxWidth","filterable","sortable","Cell","_ref","Tooltip_default","IconButton_default","size","fontSize","_ref2","ListAlt_default","_ref3","window","confirm","aria-label","Delete_default","individualTrainingColumns","_ref4","Moment","format","components_addcustomer","es","defaultPageSize","data","marginTop","DateTime","inputProps","placeholder","id","Snackbar_default","message","open","autoHideDuration","onClose","Traininglist","getAllTrainings","deleteTraining","trainingColumns","List_default","minWidth","localizer","BigCalendar","momentLocalizer","calendar","createEvents","events","i","length","concat","start","Date","end","allDay","DateRange_default","react_big_calendar_lib_default","popup","views","App","components_calendar","traininglist","customerlist","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0e8e6df.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport SkyLight from \"react-skylight\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport \"../App.css\";\r\n\r\nclass addcustomer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      firstname: \"\",\r\n      lastname: \"\",\r\n      streetaddress: \"\",\r\n      postcode: \"\",\r\n      city: \"\",\r\n      email: \"\",\r\n      phone: \"\"\r\n    };\r\n    this.addModal = React.createRef();\r\n  }\r\n\r\n  // Get input values\r\n  handleChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  // Save input data to states, save them to a variable 'customer' and send that variable to the saveCustomer function in customerlist.js\r\n  // or get the function saveCustomer from customerlist.js as a prop\r\n  saveCustomer = () => {\r\n    const customer = {\r\n      firstname: this.state.firstname,\r\n      lastname: this.state.lastname,\r\n      streetaddress: this.state.streetaddress,\r\n      postcode: this.state.postcode,\r\n      city: this.state.city,\r\n      email: this.state.email,\r\n      phone: this.state.phone\r\n    };\r\n    this.props.saveCustomer(customer);\r\n    // This clears the previously inputted values from the textfields\r\n    this.setState({\r\n      firstname: \"\",\r\n      lastname: \"\",\r\n      streetaddress: \"\",\r\n      postcode: \"\",\r\n      city: \"\",\r\n      email: \"\",\r\n      phone: \"\"\r\n    });\r\n    this.addModal.current.hide();\r\n  };\r\n\r\n  render() {\r\n    const newCustomerDialog = {\r\n      width: \"500px\",\r\n      height: \"400px\",\r\n      marginLeft: \"-15%\",\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"menuButtons\">\r\n          <Button\r\n            style={{ width: \"150px\" }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => this.addModal.current.show()}\r\n          >\r\n            <AddIcon /> New customer\r\n          </Button>\r\n        </div>\r\n        <SkyLight\r\n          dialogStyles={newCustomerDialog}\r\n          hideOnOverlayClicked\r\n          ref={this.addModal}\r\n          title=\"Add a new customer\"\r\n        >\r\n          <TextField\r\n          type=\"text\"\r\n            required\r\n            style={{ margin: \"5px\" }}\r\n            label=\"First name\"\r\n            name=\"firstname\"\r\n            variant=\"outlined\"\r\n            onChange={this.handleChange}\r\n            value={this.state.firstname}\r\n          />\r\n          <TextField\r\n            required\r\n            style={{ margin: \"5px\" }}\r\n            label=\"Last name\"\r\n            name=\"lastname\"\r\n            variant=\"outlined\"\r\n            onChange={this.handleChange}\r\n            value={this.state.lastname}\r\n          />\r\n          <TextField\r\n            required\r\n            style={{ margin: \"5px\" }}\r\n            label=\"Street address\"\r\n            name=\"streetaddress\"\r\n            variant=\"outlined\"\r\n            onChange={this.handleChange}\r\n            value={this.state.streetaddress}\r\n          />\r\n          <TextField\r\n            required\r\n            style={{ margin: \"5px\" }}\r\n            label=\"Postal code\"\r\n            name=\"postcode\"\r\n            variant=\"outlined\"\r\n            onChange={this.handleChange}\r\n            value={this.state.postcode}\r\n          />\r\n          <TextField\r\n            required\r\n            style={{ margin: \"5px\" }}\r\n            label=\"City\"\r\n            name=\"city\"\r\n            variant=\"outlined\"\r\n            onChange={this.handleChange}\r\n            value={this.state.city}\r\n          />\r\n          <TextField\r\n            required\r\n            style={{ margin: \"5px\" }}\r\n            label=\"Email address\"\r\n            name=\"email\"\r\n            variant=\"outlined\"\r\n            onChange={this.handleChange}\r\n            value={this.state.email}\r\n          />\r\n          <TextField\r\n            required\r\n            style={{ margin: \"5px\" }}\r\n            label=\"Phone number\"\r\n            name=\"phone\"\r\n            variant=\"outlined\"\r\n            onChange={this.handleChange}\r\n            value={this.state.phone}\r\n          />\r\n          <Button\r\n            style={{ margin: \"5px\", width: \"197px\", height: \"55px\" }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={this.saveCustomer}\r\n          >\r\n            <SaveIcon />\r\n            Save\r\n          </Button>\r\n        </SkyLight>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default addcustomer;\r\n","import React, { Component } from \"react\";\r\nimport ReactTable from \"react-table\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Iconbutton from \"@material-ui/core/IconButton\";\r\nimport ListAlt from \"@material-ui/icons/ListAlt\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport SkyLight from \"react-skylight\";\r\nimport Moment from \"moment\";\r\nimport Addcustomer from \"./addcustomer\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport * as Datetime from \"react-datetime\";\r\nimport \"react-table/react-table.css\";\r\nimport \"react-datetime/css/react-datetime.css\";\r\nimport \"../App.css\";\r\n\r\nclass Customerlist extends Component {\r\n  constructor(params) {\r\n    super(params);\r\n    this.state = {\r\n      customers: [],\r\n      trainings: [],\r\n      customer: \"\",\r\n      date: \"\",\r\n      activity: \"\",\r\n      duration: \"\",\r\n      showDeleteSnack: false,\r\n      showAddCustomerSnack: false,\r\n      showAddTrainingSnack: false\r\n    };\r\n    this.addModal = React.createRef();\r\n    this.addModal2 = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getCustomers();\r\n  }\r\n\r\n  // Get input values\r\n  handleChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  // Get date and time in correct format\r\n  handleDateTimePicker = (moment, name) => {\r\n    this.setState({ [name]: moment.toDate() });\r\n  };\r\n\r\n  // Get all customers\r\n  getCustomers = () => {\r\n    fetch(\"https://customerrest.herokuapp.com/api/customers\")\r\n      .then(response => response.json())\r\n      .then(responseData => {\r\n        this.setState({ customers: responseData.content });\r\n      });\r\n  };\r\n\r\n  // Get individual trainings\r\n  getTrainings = link => {\r\n    fetch(link)\r\n      .then(response => response.json())\r\n      .then(responseData => {\r\n        this.setState({\r\n          trainings: responseData.content\r\n        });\r\n      });\r\n    this.addModal.current.show();\r\n  };\r\n\r\n  // Delete a customer\r\n  deleteCustomer = link => {\r\n    fetch(link, { method: \"DELETE\" }).then(response => {\r\n      this.getCustomers();\r\n      this.setState({ showDeleteSnack: true });\r\n    });\r\n  };\r\n\r\n  // Save a new customer and get updated listing (customer comes from addcustomer.js component)\r\n  saveCustomer = customer => {\r\n    fetch(\"https://customerrest.herokuapp.com/api/customers\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(customer)\r\n    }).then(response => {\r\n      this.getCustomers();\r\n      this.setState({ showAddCustomerSnack: true });\r\n    });\r\n  };\r\n\r\n  // Set customer's url to a state to be used to create new training\r\n  setCustomer = customer => {\r\n    this.setState({ customer: customer });\r\n    this.addModal2.current.show();\r\n  };\r\n\r\n  // Save a new training\r\n  saveTraining = () => {\r\n    const training = {\r\n      date: this.state.date,\r\n      activity: this.state.activity,\r\n      duration: this.state.duration,\r\n      customer: this.state.customer\r\n    };\r\n    fetch(\"https://customerrest.herokuapp.com/api/trainings\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(training)\r\n    });\r\n    this.setState({\r\n      date: \"\",\r\n      activity: \"\",\r\n      duration: \"\"\r\n    });\r\n    this.addModal2.current.hide();\r\n    this.setState({ showAddTrainingSnack: true });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      showDeleteSnack: false,\r\n      showAddCustomerSnack: false,\r\n      showAddTrainingSnack: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const customerColumns = [\r\n      {\r\n        Header: \"Add/List\",\r\n        columns: [\r\n          {\r\n            Header: \"\",\r\n            accessor: \"links[0].href\",\r\n            maxWidth: 60,\r\n            filterable: false,\r\n            sortable: false,\r\n            Cell: ({ value }) => (\r\n              <Tooltip title=\"Add new training\">\r\n                <Iconbutton\r\n                  size=\"small\"\r\n                  color=\"primary\"\r\n                  onClick={() => this.setCustomer(value)}\r\n                >\r\n                  <AddIcon fontSize=\"small\" />\r\n                </Iconbutton>\r\n              </Tooltip>\r\n            )\r\n          },\r\n          {\r\n            Header: \"\",\r\n            accessor: \"links[2].href\",\r\n            maxWidth: 60,\r\n            filterable: false,\r\n            sortable: false,\r\n            Cell: ({ value }) => (\r\n              <Tooltip title=\"Show trainings for this customer\">\r\n                <Iconbutton\r\n                  color=\"primary\"\r\n                  size=\"small\"\r\n                  onClick={() => this.getTrainings(value)}\r\n                >\r\n                  <ListAlt fontSize=\"small\" />\r\n                </Iconbutton>\r\n              </Tooltip>\r\n            )\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        Header: \"Customer details\",\r\n        columns: [\r\n          {\r\n            Header: \"Firstname\",\r\n            accessor: \"firstname\"\r\n          },\r\n          {\r\n            Header: \"Lastname\",\r\n            accessor: \"lastname\"\r\n          },\r\n          {\r\n            Header: \"Street address\",\r\n            accessor: \"streetaddress\"\r\n          },\r\n          {\r\n            Header: \"Postal code\",\r\n            accessor: \"postcode\"\r\n          },\r\n          {\r\n            Header: \"City\",\r\n            accessor: \"city\"\r\n          },\r\n          {\r\n            Header: \"Email\",\r\n            accessor: \"email\"\r\n          },\r\n          {\r\n            Header: \"Phone number\",\r\n            accessor: \"phone\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        Header: \"Delete\",\r\n        columns: [\r\n          {\r\n            Header: \"\",\r\n            accessor: \"links[0].href\",\r\n            maxWidth: 80,\r\n            filterable: false,\r\n            sortable: false,\r\n            Cell: ({ value }) => (\r\n              <Tooltip title=\"Delete this customer\">\r\n                <Iconbutton\r\n                  color=\"secondary\"\r\n                  onClick={() => {\r\n                    if (\r\n                      window.confirm(\r\n                        \"Are you sure you want to delete this customer (and their trainings) permanently?\"\r\n                      )\r\n                    )\r\n                      this.deleteCustomer(value);\r\n                  }}\r\n                  aria-label=\"Delete\"\r\n                >\r\n                  <DeleteIcon fontSize=\"small\" />\r\n                </Iconbutton>\r\n              </Tooltip>\r\n            )\r\n          }\r\n        ]\r\n      }\r\n    ];\r\n\r\n    const individualTrainingColumns = [\r\n      {\r\n        Header: \"Activity\",\r\n        accessor: \"activity\"\r\n      },\r\n      {\r\n        Header: \"Date and time\",\r\n        accessor: \"date\",\r\n        Cell: ({ value }) => Moment(value).format(\"MMM Do YYYY, hh:mm a\")\r\n      },\r\n      {\r\n        Header: \"Duration\",\r\n        maxWidth: 80,\r\n        accessor: \"duration\"\r\n      }\r\n    ];\r\n\r\n    const newTrainingDialog = {\r\n      width: \"300px\",\r\n      height: \"350px\",\r\n      marginLeft: \"-15%\"\r\n    };\r\n\r\n    const trainingModalStyle = {\r\n      marginTop: \"-400px\",\r\n      maxWidth: \"600px\"\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <Addcustomer saveCustomer={this.saveCustomer} />\r\n        <ReactTable\r\n          filterable={true}\r\n          defaultPageSize={10}\r\n          className=\"maintable -striped -highlight\"\r\n          data={this.state.customers}\r\n          columns={customerColumns}\r\n        />\r\n          <SkyLight\r\n            dialogStyles={trainingModalStyle}\r\n            hideOnOverlayClicked\r\n            ref={this.addModal}\r\n          >\r\n            <div className=\"container\">\r\n              <h3>Individual training sessions</h3>\r\n              <ReactTable\r\n                filterable={true}\r\n                defaultPageSize={10}\r\n                className=\"-striped -highlight\"\r\n                data={this.state.trainings}\r\n                columns={individualTrainingColumns}\r\n              />\r\n            </div>\r\n          </SkyLight>\r\n        <SkyLight\r\n          dialogStyles={newTrainingDialog}\r\n          hideOnOverlayClicked\r\n          ref={this.addModal2}\r\n          title=\"Add new training\"\r\n        >\r\n          <Datetime\r\n            inputProps={{\r\n              required: \"true\",\r\n              placeholder: \"  Click to select time and date*\",\r\n              id: \"datetime\"\r\n            }}\r\n            onChange={moment => this.handleDateTimePicker(moment, \"date\")}\r\n            value={this.state.date}\r\n          />\r\n          <br />\r\n          <TextField\r\n            required\r\n            style={{ margin: \"5px\" }}\r\n            label=\"Activity\"\r\n            name=\"activity\"\r\n            variant=\"outlined\"\r\n            onChange={this.handleChange}\r\n            value={this.state.activity}\r\n          />\r\n          <TextField\r\n            required\r\n            style={{ margin: \"5px\" }}\r\n            label=\"Duration\"\r\n            name=\"duration\"\r\n            variant=\"outlined\"\r\n            onChange={this.handleChange}\r\n            value={this.state.duration}\r\n          />\r\n          <br />\r\n\r\n          <Button\r\n            style={{ margin: 10 }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={this.saveTraining}\r\n          >\r\n            <SaveIcon />\r\n            Save\r\n          </Button>\r\n        </SkyLight>\r\n        <Snackbar\r\n          message={\"Customer deleted succesfully\"}\r\n          open={this.state.showDeleteSnack}\r\n          autoHideDuration={3000}\r\n          onClose={this.handleClose}\r\n        />\r\n        <Snackbar\r\n          message={\"Customer added succesfully\"}\r\n          open={this.state.showAddCustomerSnack}\r\n          autoHideDuration={3000}\r\n          onClose={this.handleClose}\r\n        />\r\n        <Snackbar\r\n          message={\"Training added succesfully\"}\r\n          open={this.state.showAddTrainingSnack}\r\n          autoHideDuration={3000}\r\n          onClose={this.handleClose}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Customerlist;\r\n","import React, { Component } from \"react\";\r\nimport ReactTable from \"react-table\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Iconbutton from \"@material-ui/core/IconButton\";\r\nimport ListIcon from \"@material-ui/icons/List\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Moment from \"moment\";\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport SkyLight from \"react-skylight\";\r\n\r\nclass Traininglist extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { trainings: [], showDeleteSnack: false };\r\n    this.addModal = React.createRef();\r\n  }\r\n\r\n  // Get all trainings\r\n  getAllTrainings = () => {\r\n    fetch(\"https://customerrest.herokuapp.com/gettrainings\")\r\n      .then(response => response.json())\r\n      .then(responseData => {\r\n        this.setState({ trainings: responseData });\r\n      });\r\n    this.addModal.current.show();\r\n  };\r\n\r\n  // Delete a training\r\n  deleteTraining = link => {\r\n    fetch(\"https://customerrest.herokuapp.com/api/trainings/\" + link, {\r\n      method: \"DELETE\"\r\n    }).then(response => {\r\n      this.getAllTrainings();\r\n      this.setState({ showDeleteSnack: true });\r\n    });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      showDeleteSnack: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const trainingColumns = [\r\n      {\r\n        Header: \"Firstname\",\r\n        accessor: \"customer.firstname\"\r\n      },\r\n      {\r\n        Header: \"Lastname\",\r\n        accessor: \"customer.lastname\"\r\n      },\r\n      {\r\n        Header: \"Date and time\",\r\n        accessor: \"date\",\r\n        Cell: ({ value }) => Moment(value).format(\"MMM Do YYYY, hh:mm a\")\r\n      },\r\n      {\r\n        Header: \"Duration (min)\",\r\n        accessor: \"duration\",\r\n        maxWidth: 120\r\n      },\r\n      {\r\n        Header: \"Activity\",\r\n        accessor: \"activity\"\r\n      },\r\n      {\r\n        Header: \"\",\r\n        accessor: \"id\",\r\n        maxWidth: 80,\r\n        filterable: false,\r\n        sortable: false,\r\n        Cell: ({ value }) => (\r\n          <Tooltip title=\"Delete this training\">\r\n          <Iconbutton\r\n            color=\"secondary\"\r\n            size=\"small\"\r\n            onClick={() => {\r\n              if (\r\n                window.confirm(\r\n                  \"Are you sure you want to delete this training permanently?\"\r\n                )\r\n              )\r\n                this.deleteTraining(value);\r\n            }}\r\n            aria-label=\"Delete\"\r\n          >\r\n            <DeleteIcon fontSize=\"small\" />\r\n          </Iconbutton>\r\n          </Tooltip>\r\n        )\r\n      }\r\n    ];\r\n\r\n    const trainingModalStyle = {\r\n      marginTop: \"-300px\",\r\n      minWidth: \"500px\"\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"menuButtons\">\r\n        <Button\r\n          style={{ width: \"150px\" }}\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={this.getAllTrainings}\r\n        >\r\n          <ListIcon /> Show all trainings\r\n        </Button></div>\r\n        <SkyLight\r\n          dialogStyles={trainingModalStyle}\r\n          hideOnOverlayClicked\r\n          ref={this.addModal}\r\n        >\r\n          <div className=\"container\">\r\n            <h3>All trainings</h3>\r\n            <ReactTable\r\n              filterable={true}\r\n              defaultPageSize={10}\r\n              className=\"-striped -highlight\"\r\n              data={this.state.trainings}\r\n              columns={trainingColumns}\r\n            />\r\n          </div>\r\n        </SkyLight>\r\n        <Snackbar\r\n          message={\"Training deleted succesfully\"}\r\n          open={this.state.showDeleteSnack}\r\n          autoHideDuration={3000}\r\n          onClose={this.handleClose}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Traininglist;\r\n","import React, { Component } from \"react\";\r\nimport BigCalendar from \"react-big-calendar\";\r\nimport Moment from \"moment\";\r\nimport SkyLight from \"react-skylight\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Daterange from \"@material-ui/icons/DateRange\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\n\r\nconst localizer = BigCalendar.momentLocalizer(Moment);\r\n\r\nclass calendar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { trainings: [], events: [] };\r\n    this.addModal = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAllTrainings();\r\n  }\r\n\r\n  // Get all trainings\r\n  getAllTrainings = () => {\r\n    fetch(\"https://customerrest.herokuapp.com/gettrainings\")\r\n      .then(response => response.json())\r\n      .then(responseData => {\r\n        this.setState({ trainings: responseData });\r\n      });\r\n  };\r\n\r\n  // Create events in the correct format from the json response\r\n  createEvents = () => {\r\n    let trainings = this.state.trainings;\r\n    let events = [];\r\n\r\n    for (let i = 0; i < trainings.length; i++) {\r\n      if (trainings[i].customer != null) {\r\n        events[i] = {\r\n          title: `Activity: ${trainings[i].activity}, Customer: ${\r\n            trainings[i].customer.firstname\r\n          } ${trainings[i].customer.lastname}`,\r\n          start: new Date(trainings[i].date),\r\n          end: new Date(trainings[i].date + trainings[i].duration * 60000),\r\n          allDay: false\r\n        };\r\n      }\r\n    }\r\n    this.setState({ events: events });\r\n    this.addModal.current.show();\r\n  };\r\n\r\n  render() {\r\n    const calendarModalStyle = {\r\n      marginTop: \"-400px\",\r\n      minWidth: \"800px\"\r\n    };\r\n    return (\r\n      <div>\r\n        <div className=\"menuButtons\">\r\n          <Button\r\n            style={{ width: \"150px\" }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={this.createEvents}\r\n          >\r\n            <Daterange />\r\n            Show calendar\r\n          </Button>\r\n        </div>\r\n        <SkyLight\r\n          dialogStyles={calendarModalStyle}\r\n          hideOnOverlayClicked\r\n          ref={this.addModal}\r\n        >\r\n          <div className=\"container\">\r\n            <BigCalendar\r\n              popup\r\n              localizer={localizer}\r\n              style={{ height: 700 }}\r\n              events={this.state.events}\r\n              views={[\"month\", \"day\", \"week\", \"agenda\"]}\r\n            />\r\n          </div>\r\n        </SkyLight>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default calendar;\r\n","import React, { Component } from 'react';\nimport Customerlist from './components/customerlist';\nimport Traininglist from './components/traininglist';\nimport Calendar from './components/calendar';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2>Customers</h2> \n        </header>\n        <Calendar />\n        <Traininglist />\n        <Customerlist />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}